# Step 1: Initialize Classes
# Get API key from environment variables
def get_openai_api_key():
    """Retrieve OpenAI API key from environment variables."""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise ValueError("API key not found. Please set the OPENAI_API_KEY environment variable.")
    return api_key

APIKEY = get_openai_api_key()

import os
import pandas as pd
from utils import LLMWrapper
from utils import PromptStabilityAnalysis
from transformers import AutoModelForCausalLM, AutoTokenizer
import simpledorff

import seaborn as sns
import matplotlib.pyplot as plt

MODEL = 'gpt-3.5-turbo'

# Data
df = pd.read_csv('data/tweets.csv')
df = df.sample(10)
example_data = list(df['text'].values)

llm = LLMWrapper(apikey=APIKEY, model=MODEL)
psa = PromptStabilityAnalysis(llm=llm, data=example_data)

# Step 2: Construct the Prompt
original_text = 'The following is a Twitter message written either by a Republican or a Democrat before the 2020 election. Your task is to guess whether the author is Republican or Democrat.'
prompt_postfix = '[Respond 0 for Democrat, or 1 for Republican. Guess if you do not know. Respond nothing else.]'
prompt = f'{original_text} {prompt_postfix}'
print("Constructed Prompt:", prompt)

# Step 3: Annotate Data for One Iteration
annotated = []
iteration = 0

for j, d in enumerate(psa.data):
    annotation = psa.llm.annotate(d, prompt, parse_function=None)
    annotated.append({'id': j, 'text': d, 'annotation': annotation, 'iteration': iteration})

print("Annotated Data (Iteration 0):")
for entry in annotated:
    print(entry)

# Step 4: Convert Annotated Data to DataFrame
df = pd.DataFrame(annotated)
print("DataFrame of Annotated Data:")
print(df)

# Step 5: Calculate Krippendorff's Alpha
if iteration > 0:
    KA = simpledorff.calculate_krippendorffs_alpha_for_df(
        df,
        metric_fn=simpledorff.metrics.nominal_metric,
        experiment_col='id',
        annotator_col='iteration',
        class_col='annotation'
    )
    print("Krippendorff's Alpha (KA):", KA)
else:
    KA = None

# Step 6: Iterate Over Multiple Iterations
iterations = 3
ka_scores = []
iterrations_no = []

for i in range(1, iterations):
    print(f"Iteration {i}/{iterations}...", end='\r')
    sys.stdout.flush()
    for j, d in enumerate(psa.data):
        annotation = psa.llm.annotate(d, prompt, parse_function=None)
        annotated.append({'id': j, 'text': d, 'annotation': annotation, 'iteration': i})

    df = pd.DataFrame(annotated)
    KA = simpledorff.calculate_krippendorffs_alpha_for_df(
        df,
        metric_fn=simpledorff.metrics.nominal_metric,
        experiment_col='id',
        annotator_col='iteration',
        class_col='annotation'
    )
    ka_scores.append(KA)
    iterrations_no.append(i + 1)

print()
print('Finished classifications.')
print(f'Within-prompt KA score for {i + 1} repetitions is {KA}')

print("KA Scores:", ka_scores)
print("Iteration Numbers:", iterrations_no)
